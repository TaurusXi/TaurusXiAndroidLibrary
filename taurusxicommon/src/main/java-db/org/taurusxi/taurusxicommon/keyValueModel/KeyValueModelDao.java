package org.taurusxi.taurusxicommon.keyValueModel;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.taurusxi.taurusxicommon.keyValueModel.KeyValueModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table KEY_VALUE_MODEL.
*/
public class KeyValueModelDao extends AbstractDao<KeyValueModel, String> {

    public static final String TABLENAME = "KEY_VALUE_MODEL";

    /**
     * Properties of entity KeyValueModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "key", true, "KEY");
        public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
    };


    public KeyValueModelDao(DaoConfig config) {
        super(config);
    }
    
    public KeyValueModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'KEY_VALUE_MODEL' (" + //
                "'KEY' TEXT PRIMARY KEY NOT NULL ," + // 0: key
                "'VALUE' TEXT NOT NULL );"); // 1: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'KEY_VALUE_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, KeyValueModel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getKey());
        stmt.bindString(2, entity.getValue());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public KeyValueModel readEntity(Cursor cursor, int offset) {
        KeyValueModel entity = new KeyValueModel( //
            cursor.getString(offset + 0), // key
            cursor.getString(offset + 1) // value
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, KeyValueModel entity, int offset) {
        entity.setKey(cursor.getString(offset + 0));
        entity.setValue(cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(KeyValueModel entity, long rowId) {
        return entity.getKey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(KeyValueModel entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
