//package org.taurusxi.taurusxi.kotlin.utils
//
//import android.app.Activity
//import android.content.Context
//import android.os.Handler
//import android.os.Looper
//import android.support.v4.app.Fragment
//import java.lang.ref.WeakReference
//import java.util.concurrent.*
//import java.util.concurrent.atomic.AtomicInteger
//
///**
// * Created by xicheng on 16/1/23.
// */
//
//private object ContextHelper {
//    val handler = Handler(Looper.getMainLooper())
//    val mainThread = Looper.getMainLooper().thread
//}
//
////private  object BackgroundExecutor {
////
////    private val CPU_COUNT = Runtime.getRuntime().availableProcessors()
////    private val CORE_POOL_SIZE = CPU_COUNT
////    private val MAXIMUM_POOL_SIZE = CPU_COUNT * 2
////    private val KEEP_ALIVE = 2L
////    private val sPoolWorkQueue = LinkedBlockingQueue<Runnable>(128)
////
////    private val sThreadFactory = object : ThreadFactory {
////        private val mCount = AtomicInteger(1)
////
////        override fun newThread(r: Runnable): Thread {
////            return Thread(r, "BackgroundExecutor #" + mCount.andIncrement)
////        }
////    }
////    val executor: ExecutorService = ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE, TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory)
////
////    fun execute(task: () -> Unit): Future<Unit> {
////        return executor.submit<Unit> { task() }
////    }
////
////    fun <T> submit(task: () -> T): Future<T> {
////        return executor.submit(task)
////    }
////}
////
////class AsyncContext<T>(val weakRef:WeakReference<T>)
////
////fun <T> T.asyncTX(task: AsyncContext<T>.() -> Unit): Future<Unit> {
////    val context = AsyncContext(WeakReference(this))
////    return BackgroundExecutor.submit { context.task() }
////}
////
////fun <T: Activity> AsyncContext<T>.activityUiThreadTX(f: Context.(T) -> Unit) {
////    val activity = weakRef.get() ?: return
////    if (activity.isFinishing) return
////    activity.runOnUiThread { activity.f(activity) }
////}
////
////fun <T: Fragment> AsyncContext<T>.fragmentUiThreadTX(f: Context.(T) -> Unit) {
////    val fragment = weakRef.get() ?: return
////    if (fragment.isDetached) return
////    val activity = fragment.activity ?: return
////    activity.runOnUiThread { activity.f(fragment) }
////}
//
